import json
import logging
import random
from telegram import (
    Update,
    InlineQueryResultArticle,
    InputTextMessageContent,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    InlineQueryHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
TEXT_SELECTION, NEW_TEXT = range(2)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('config.json', 'r') as f:
    config = json.load(f)

def save_config():
    with open('config.json', 'w') as f:
        json.dump(config, f, indent=4)

# –®—É—Ç–∫–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
JOKES = config.get('jokes', [
    "–ê —Ç—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —ç—Ç–æ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–π?",
    "–†–∞–¥—É–≥–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ —è—Ä–∫–∞—è!",
    "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ... –∏–ª–∏ –Ω–µ—Ç?"
])

def generate_result(percent: int) -> str:
    joke = random.choice(JOKES)
    return config['texts']['result'].format(percent=percent, joke=joke)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé≤ –ë–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–µ–π-–ø—Ä–æ—Ü–µ–Ω—Ç–∞!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username_–±–æ—Ç–∞ –≤ –ª—é–±–æ–º —á–∞—Ç–µ!",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton(
                "‚ú® –ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                switch_inline_query_current_chat=""
            )
        ]])
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥ —Å @username_–±–æ—Ç–∞ –≤ –ª—é–±–æ–º —á–∞—Ç–µ!"
    )

# –ò–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º
async def inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    percent = random.randint(0, 100)
    result_text = generate_result(percent)
    
    results = [
        InlineQueryResultArticle(
            id=str(random.getrandbits(64)),
            title=f"üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {percent}%",
            description="–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç",
            input_message_content=InputTextMessageContent(result_text)
        )
    ]
    
    await update.inline_query.answer(results, cache_time=0)

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in config['admin_ids']:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return ConversationHandler.END
    
    keyboard = [[
        InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data='edit_text')
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)
    return TEXT_SELECTION

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'edit_text':
        await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ {percent} –∏ {joke}):")
        return NEW_TEXT

async def save_new_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_text = update.message.text
    config['texts']['result'] = new_text
    save_config()
    await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    return ConversationHandler.END

def main() -> None:
    application = Application.builder().token("tyttoken").build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(InlineQueryHandler(inline_query))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("admin", admin_panel)],
        states={
            TEXT_SELECTION: [CallbackQueryHandler(button_callback)],
            NEW_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_new_text)]
        },
        fallbacks=[]
    )
    application.add_handler(conv_handler)

    application.run_polling()

if __name__ == "__main__":
    main()
